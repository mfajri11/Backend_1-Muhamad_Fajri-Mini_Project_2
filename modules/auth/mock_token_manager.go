// Code generated by mockery v2.20.0. DO NOT EDIT.

package auth

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockITokenManager is an autogenerated mock type for the ITokenManager type
type MockITokenManager struct {
	mock.Mock
}

type MockITokenManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockITokenManager) EXPECT() *MockITokenManager_Expecter {
	return &MockITokenManager_Expecter{mock: &_m.Mock}
}

// GenerateToken provides a mock function with given fields: username, role, exp
func (_m *MockITokenManager) GenerateToken(username string, role string, exp time.Time) (string, error) {
	ret := _m.Called(username, role, exp)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, time.Time) (string, error)); ok {
		return rf(username, role, exp)
	}
	if rf, ok := ret.Get(0).(func(string, string, time.Time) string); ok {
		r0 = rf(username, role, exp)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, time.Time) error); ok {
		r1 = rf(username, role, exp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockITokenManager_GenerateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateToken'
type MockITokenManager_GenerateToken_Call struct {
	*mock.Call
}

// GenerateToken is a helper method to define mock.On call
//   - username string
//   - role string
//   - exp time.Time
func (_e *MockITokenManager_Expecter) GenerateToken(username interface{}, role interface{}, exp interface{}) *MockITokenManager_GenerateToken_Call {
	return &MockITokenManager_GenerateToken_Call{Call: _e.mock.On("GenerateToken", username, role, exp)}
}

func (_c *MockITokenManager_GenerateToken_Call) Run(run func(username string, role string, exp time.Time)) *MockITokenManager_GenerateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(time.Time))
	})
	return _c
}

func (_c *MockITokenManager_GenerateToken_Call) Return(_a0 string, _a1 error) *MockITokenManager_GenerateToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockITokenManager_GenerateToken_Call) RunAndReturn(run func(string, string, time.Time) (string, error)) *MockITokenManager_GenerateToken_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateToken provides a mock function with given fields: token
func (_m *MockITokenManager) ValidateToken(token string) (interface{}, error) {
	ret := _m.Called(token)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (interface{}, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockITokenManager_ValidateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateToken'
type MockITokenManager_ValidateToken_Call struct {
	*mock.Call
}

// ValidateToken is a helper method to define mock.On call
//   - token string
func (_e *MockITokenManager_Expecter) ValidateToken(token interface{}) *MockITokenManager_ValidateToken_Call {
	return &MockITokenManager_ValidateToken_Call{Call: _e.mock.On("ValidateToken", token)}
}

func (_c *MockITokenManager_ValidateToken_Call) Run(run func(token string)) *MockITokenManager_ValidateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockITokenManager_ValidateToken_Call) Return(_a0 interface{}, _a1 error) *MockITokenManager_ValidateToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockITokenManager_ValidateToken_Call) RunAndReturn(run func(string) (interface{}, error)) *MockITokenManager_ValidateToken_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockITokenManager interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockITokenManager creates a new instance of MockITokenManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockITokenManager(t mockConstructorTestingTNewMockITokenManager) *MockITokenManager {
	mock := &MockITokenManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
