// Code generated by mockery v2.20.0. DO NOT EDIT.

package register_approval

import (
	entity "github.com/mfajri11/Backend_1-Muhamad_Fajri-Mini_Project_2/entity"
	mock "github.com/stretchr/testify/mock"
)

// MockIRegisterApprovalRepository is an autogenerated mock type for the IRegisterApprovalRepository type
type MockIRegisterApprovalRepository struct {
	mock.Mock
}

type MockIRegisterApprovalRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIRegisterApprovalRepository) EXPECT() *MockIRegisterApprovalRepository_Expecter {
	return &MockIRegisterApprovalRepository_Expecter{mock: &_m.Mock}
}

// FindAll provides a mock function with given fields: page
func (_m *MockIRegisterApprovalRepository) FindAll(page int) ([]*entity.RegisterApproval, error) {
	ret := _m.Called(page)

	var r0 []*entity.RegisterApproval
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]*entity.RegisterApproval, error)); ok {
		return rf(page)
	}
	if rf, ok := ret.Get(0).(func(int) []*entity.RegisterApproval); ok {
		r0 = rf(page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.RegisterApproval)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(page)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIRegisterApprovalRepository_FindAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAll'
type MockIRegisterApprovalRepository_FindAll_Call struct {
	*mock.Call
}

// FindAll is a helper method to define mock.On call
//   - page int
func (_e *MockIRegisterApprovalRepository_Expecter) FindAll(page interface{}) *MockIRegisterApprovalRepository_FindAll_Call {
	return &MockIRegisterApprovalRepository_FindAll_Call{Call: _e.mock.On("FindAll", page)}
}

func (_c *MockIRegisterApprovalRepository_FindAll_Call) Run(run func(page int)) *MockIRegisterApprovalRepository_FindAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockIRegisterApprovalRepository_FindAll_Call) Return(_a0 []*entity.RegisterApproval, _a1 error) *MockIRegisterApprovalRepository_FindAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIRegisterApprovalRepository_FindAll_Call) RunAndReturn(run func(int) ([]*entity.RegisterApproval, error)) *MockIRegisterApprovalRepository_FindAll_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateApprovalStatus provides a mock function with given fields: id, val
func (_m *MockIRegisterApprovalRepository) UpdateApprovalStatus(id uint, val string) error {
	ret := _m.Called(id, val)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, string) error); ok {
		r0 = rf(id, val)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIRegisterApprovalRepository_UpdateApprovalStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateApprovalStatus'
type MockIRegisterApprovalRepository_UpdateApprovalStatus_Call struct {
	*mock.Call
}

// UpdateApprovalStatus is a helper method to define mock.On call
//   - id uint
//   - val string
func (_e *MockIRegisterApprovalRepository_Expecter) UpdateApprovalStatus(id interface{}, val interface{}) *MockIRegisterApprovalRepository_UpdateApprovalStatus_Call {
	return &MockIRegisterApprovalRepository_UpdateApprovalStatus_Call{Call: _e.mock.On("UpdateApprovalStatus", id, val)}
}

func (_c *MockIRegisterApprovalRepository_UpdateApprovalStatus_Call) Run(run func(id uint, val string)) *MockIRegisterApprovalRepository_UpdateApprovalStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(string))
	})
	return _c
}

func (_c *MockIRegisterApprovalRepository_UpdateApprovalStatus_Call) Return(_a0 error) *MockIRegisterApprovalRepository_UpdateApprovalStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIRegisterApprovalRepository_UpdateApprovalStatus_Call) RunAndReturn(run func(uint, string) error) *MockIRegisterApprovalRepository_UpdateApprovalStatus_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockIRegisterApprovalRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockIRegisterApprovalRepository creates a new instance of MockIRegisterApprovalRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockIRegisterApprovalRepository(t mockConstructorTestingTNewMockIRegisterApprovalRepository) *MockIRegisterApprovalRepository {
	mock := &MockIRegisterApprovalRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
