// Code generated by mockery v2.20.0. DO NOT EDIT.

package customer

import (
	entity "github.com/mfajri11/Backend_1-Muhamad_Fajri-Mini_Project_2/entity"
	mock "github.com/stretchr/testify/mock"
)

// MockICustomerRepository is an autogenerated mock type for the ICustomerRepository type
type MockICustomerRepository struct {
	mock.Mock
}

type MockICustomerRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockICustomerRepository) EXPECT() *MockICustomerRepository_Expecter {
	return &MockICustomerRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: customer
func (_m *MockICustomerRepository) Create(customer *entity.Customer) error {
	ret := _m.Called(customer)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Customer) error); ok {
		r0 = rf(customer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockICustomerRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockICustomerRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - customer *entity.Customer
func (_e *MockICustomerRepository_Expecter) Create(customer interface{}) *MockICustomerRepository_Create_Call {
	return &MockICustomerRepository_Create_Call{Call: _e.mock.On("Create", customer)}
}

func (_c *MockICustomerRepository_Create_Call) Run(run func(customer *entity.Customer)) *MockICustomerRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.Customer))
	})
	return _c
}

func (_c *MockICustomerRepository_Create_Call) Return(_a0 error) *MockICustomerRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockICustomerRepository_Create_Call) RunAndReturn(run func(*entity.Customer) error) *MockICustomerRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: id
func (_m *MockICustomerRepository) Delete(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockICustomerRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockICustomerRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - id uint
func (_e *MockICustomerRepository_Expecter) Delete(id interface{}) *MockICustomerRepository_Delete_Call {
	return &MockICustomerRepository_Delete_Call{Call: _e.mock.On("Delete", id)}
}

func (_c *MockICustomerRepository_Delete_Call) Run(run func(id uint)) *MockICustomerRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *MockICustomerRepository_Delete_Call) Return(_a0 error) *MockICustomerRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockICustomerRepository_Delete_Call) RunAndReturn(run func(uint) error) *MockICustomerRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Search provides a mock function with given fields: page, name, email
func (_m *MockICustomerRepository) Search(page int, name string, email string) ([]*entity.Customer, error) {
	ret := _m.Called(page, name, email)

	var r0 []*entity.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(int, string, string) ([]*entity.Customer, error)); ok {
		return rf(page, name, email)
	}
	if rf, ok := ret.Get(0).(func(int, string, string) []*entity.Customer); ok {
		r0 = rf(page, name, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(int, string, string) error); ok {
		r1 = rf(page, name, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockICustomerRepository_Search_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Search'
type MockICustomerRepository_Search_Call struct {
	*mock.Call
}

// Search is a helper method to define mock.On call
//   - page int
//   - name string
//   - email string
func (_e *MockICustomerRepository_Expecter) Search(page interface{}, name interface{}, email interface{}) *MockICustomerRepository_Search_Call {
	return &MockICustomerRepository_Search_Call{Call: _e.mock.On("Search", page, name, email)}
}

func (_c *MockICustomerRepository_Search_Call) Run(run func(page int, name string, email string)) *MockICustomerRepository_Search_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockICustomerRepository_Search_Call) Return(_a0 []*entity.Customer, _a1 error) *MockICustomerRepository_Search_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockICustomerRepository_Search_Call) RunAndReturn(run func(int, string, string) ([]*entity.Customer, error)) *MockICustomerRepository_Search_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: customer
func (_m *MockICustomerRepository) Update(customer *entity.Customer) (*entity.Customer, error) {
	ret := _m.Called(customer)

	var r0 *entity.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.Customer) (*entity.Customer, error)); ok {
		return rf(customer)
	}
	if rf, ok := ret.Get(0).(func(*entity.Customer) *entity.Customer); ok {
		r0 = rf(customer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.Customer) error); ok {
		r1 = rf(customer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockICustomerRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockICustomerRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - customer *entity.Customer
func (_e *MockICustomerRepository_Expecter) Update(customer interface{}) *MockICustomerRepository_Update_Call {
	return &MockICustomerRepository_Update_Call{Call: _e.mock.On("Update", customer)}
}

func (_c *MockICustomerRepository_Update_Call) Run(run func(customer *entity.Customer)) *MockICustomerRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.Customer))
	})
	return _c
}

func (_c *MockICustomerRepository_Update_Call) Return(_a0 *entity.Customer, _a1 error) *MockICustomerRepository_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockICustomerRepository_Update_Call) RunAndReturn(run func(*entity.Customer) (*entity.Customer, error)) *MockICustomerRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockICustomerRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockICustomerRepository creates a new instance of MockICustomerRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockICustomerRepository(t mockConstructorTestingTNewMockICustomerRepository) *MockICustomerRepository {
	mock := &MockICustomerRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
