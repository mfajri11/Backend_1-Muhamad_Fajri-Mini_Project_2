// Code generated by mockery v2.20.0. DO NOT EDIT.

package account

import (
	entity "github.com/mfajri11/Backend_1-Muhamad_Fajri-Mini_Project_2/entity"
	mock "github.com/stretchr/testify/mock"
)

// MockIAccountRepository is an autogenerated mock type for the IAccountRepository type
type MockIAccountRepository struct {
	mock.Mock
}

type MockIAccountRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIAccountRepository) EXPECT() *MockIAccountRepository_Expecter {
	return &MockIAccountRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: account
func (_m *MockIAccountRepository) Create(account *entity.Account) error {
	ret := _m.Called(account)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Account) error); ok {
		r0 = rf(account)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAccountRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockIAccountRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - account *entity.Account
func (_e *MockIAccountRepository_Expecter) Create(account interface{}) *MockIAccountRepository_Create_Call {
	return &MockIAccountRepository_Create_Call{Call: _e.mock.On("Create", account)}
}

func (_c *MockIAccountRepository_Create_Call) Run(run func(account *entity.Account)) *MockIAccountRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.Account))
	})
	return _c
}

func (_c *MockIAccountRepository_Create_Call) Return(_a0 error) *MockIAccountRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAccountRepository_Create_Call) RunAndReturn(run func(*entity.Account) error) *MockIAccountRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: id
func (_m *MockIAccountRepository) Delete(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAccountRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockIAccountRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - id uint
func (_e *MockIAccountRepository_Expecter) Delete(id interface{}) *MockIAccountRepository_Delete_Call {
	return &MockIAccountRepository_Delete_Call{Call: _e.mock.On("Delete", id)}
}

func (_c *MockIAccountRepository_Delete_Call) Run(run func(id uint)) *MockIAccountRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *MockIAccountRepository_Delete_Call) Return(_a0 error) *MockIAccountRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAccountRepository_Delete_Call) RunAndReturn(run func(uint) error) *MockIAccountRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// FindByUsername provides a mock function with given fields: page, username
func (_m *MockIAccountRepository) FindByUsername(page int, username string) (*entity.Account, error) {
	ret := _m.Called(page, username)

	var r0 *entity.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(int, string) (*entity.Account, error)); ok {
		return rf(page, username)
	}
	if rf, ok := ret.Get(0).(func(int, string) *entity.Account); ok {
		r0 = rf(page, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(int, string) error); ok {
		r1 = rf(page, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAccountRepository_FindByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByUsername'
type MockIAccountRepository_FindByUsername_Call struct {
	*mock.Call
}

// FindByUsername is a helper method to define mock.On call
//   - page int
//   - username string
func (_e *MockIAccountRepository_Expecter) FindByUsername(page interface{}, username interface{}) *MockIAccountRepository_FindByUsername_Call {
	return &MockIAccountRepository_FindByUsername_Call{Call: _e.mock.On("FindByUsername", page, username)}
}

func (_c *MockIAccountRepository_FindByUsername_Call) Run(run func(page int, username string)) *MockIAccountRepository_FindByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(string))
	})
	return _c
}

func (_c *MockIAccountRepository_FindByUsername_Call) Return(_a0 *entity.Account, _a1 error) *MockIAccountRepository_FindByUsername_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAccountRepository_FindByUsername_Call) RunAndReturn(run func(int, string) (*entity.Account, error)) *MockIAccountRepository_FindByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// FirstByUsername provides a mock function with given fields: username
func (_m *MockIAccountRepository) FirstByUsername(username string) (*entity.Account, error) {
	ret := _m.Called(username)

	var r0 *entity.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entity.Account, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) *entity.Account); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAccountRepository_FirstByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FirstByUsername'
type MockIAccountRepository_FirstByUsername_Call struct {
	*mock.Call
}

// FirstByUsername is a helper method to define mock.On call
//   - username string
func (_e *MockIAccountRepository_Expecter) FirstByUsername(username interface{}) *MockIAccountRepository_FirstByUsername_Call {
	return &MockIAccountRepository_FirstByUsername_Call{Call: _e.mock.On("FirstByUsername", username)}
}

func (_c *MockIAccountRepository_FirstByUsername_Call) Run(run func(username string)) *MockIAccountRepository_FirstByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockIAccountRepository_FirstByUsername_Call) Return(_a0 *entity.Account, _a1 error) *MockIAccountRepository_FirstByUsername_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAccountRepository_FirstByUsername_Call) RunAndReturn(run func(string) (*entity.Account, error)) *MockIAccountRepository_FirstByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: account
func (_m *MockIAccountRepository) Update(account *entity.Account) (*entity.Account, error) {
	ret := _m.Called(account)

	var r0 *entity.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.Account) (*entity.Account, error)); ok {
		return rf(account)
	}
	if rf, ok := ret.Get(0).(func(*entity.Account) *entity.Account); ok {
		r0 = rf(account)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.Account) error); ok {
		r1 = rf(account)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAccountRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockIAccountRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - account *entity.Account
func (_e *MockIAccountRepository_Expecter) Update(account interface{}) *MockIAccountRepository_Update_Call {
	return &MockIAccountRepository_Update_Call{Call: _e.mock.On("Update", account)}
}

func (_c *MockIAccountRepository_Update_Call) Run(run func(account *entity.Account)) *MockIAccountRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.Account))
	})
	return _c
}

func (_c *MockIAccountRepository_Update_Call) Return(_a0 *entity.Account, _a1 error) *MockIAccountRepository_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAccountRepository_Update_Call) RunAndReturn(run func(*entity.Account) (*entity.Account, error)) *MockIAccountRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateActivatedAccount provides a mock function with given fields: id, activated
func (_m *MockIAccountRepository) UpdateActivatedAccount(id uint, activated bool) error {
	ret := _m.Called(id, activated)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, bool) error); ok {
		r0 = rf(id, activated)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAccountRepository_UpdateActivatedAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateActivatedAccount'
type MockIAccountRepository_UpdateActivatedAccount_Call struct {
	*mock.Call
}

// UpdateActivatedAccount is a helper method to define mock.On call
//   - id uint
//   - activated bool
func (_e *MockIAccountRepository_Expecter) UpdateActivatedAccount(id interface{}, activated interface{}) *MockIAccountRepository_UpdateActivatedAccount_Call {
	return &MockIAccountRepository_UpdateActivatedAccount_Call{Call: _e.mock.On("UpdateActivatedAccount", id, activated)}
}

func (_c *MockIAccountRepository_UpdateActivatedAccount_Call) Run(run func(id uint, activated bool)) *MockIAccountRepository_UpdateActivatedAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(bool))
	})
	return _c
}

func (_c *MockIAccountRepository_UpdateActivatedAccount_Call) Return(_a0 error) *MockIAccountRepository_UpdateActivatedAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAccountRepository_UpdateActivatedAccount_Call) RunAndReturn(run func(uint, bool) error) *MockIAccountRepository_UpdateActivatedAccount_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockIAccountRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockIAccountRepository creates a new instance of MockIAccountRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockIAccountRepository(t mockConstructorTestingTNewMockIAccountRepository) *MockIAccountRepository {
	mock := &MockIAccountRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
